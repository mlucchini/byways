from decouple import config
from geopy import distance

import json
import os
import os.path
import urllib3


class WrongFormatGeoJson(Exception):
    """
    Exception raised when geoJson type is not in [Point, MultiPoint, LineString, MultiLineString,
                                                 Polygon, MultiPolygon, GeometryCollection]
    """


def to_kml(geo_json: dict):
    """
    Convert to kml from geoJson
    """
    return '<?xml version="1.0" encoding="UTF-8"?>' + tag('kml', tag('Document', gen_kml_data(geo_json)))


def gen_kml_data(geo_json: dict):
    """
    Generate kml data based on geojson type.
    """
    geo_type = geo_json.get('type')
    if not geo_type:
        return ''
    if geo_type == 'FeatureCollection':
        features = geo_json.get('features')
        if not features:
            return ''
        return ''.join([geo_feature(feature) for feature in features])
    elif geo_type == 'Feature':
        return geo_feature(geo_json)
    else:
        return geo_feature({'type': 'Feature', 'geometry': geo_json})


def geo_feature(geo_data: dict):
    """
    Generate Placemark tag kml
    """
    geometry = geo_data.get('geometry')
    if geometry is None:
        return ''
    if not is_geometry_valid(geometry):
        return ''
    kml_str = geometry_converter(geometry)
    if not kml_str:
        return ''
    properties = geo_data.get('properties')
    properties_str = meta_properties(properties)
    mapstreetview_str = meta_mapstreetview(properties)
    return tag('Placemark', properties_str + mapstreetview_str + kml_str)


def midpoint(coords1, coords2):
    # Incorrect but will do since all these distances are small
    return (str((float(coords1[0]) + float(coords2[0])) / 2.0), str((float(coords1[1]) + float(coords2[1])) / 2.0))


def meta_mapstreetview(properties_data: dict):
    """
    Generate the Maps Streetview metadata:
       - Panorama identifiers for entry and exit points; useful to check what the trail may look like
       - Availability of Maps StreetView if entry, middle and exit points all have Maps StreetView panoramas close by and generated by Google
    """
    if not properties_data:
        return ''
    description = properties_data['Description']
    if not description:
        return ''
    description_parts = description.split('|')
    entry_coords = (description_parts[5], description_parts[4])
    exit_coords = (description_parts[7], description_parts[6])
    mid_coords = midpoint(entry_coords, exit_coords)
    meta_mapstreetview_pano_entry_str = meta_mapstreetview_pano(entry_coords)
    meta_mapstreetview_pano_midpoint_str = meta_mapstreetview_pano(mid_coords)
    meta_mapstreetview_pano_exit_str = meta_mapstreetview_pano(exit_coords)
    mapstreetview_available = meta_mapstreetview_pano_entry_str != '' and meta_mapstreetview_pano_midpoint_str != '' and meta_mapstreetview_pano_exit_str != ''
    msv_available_tag = tag('StreetViewAvailable', 'True' if mapstreetview_available else 'False')
    msv_pano_entry_tag = tag('PanoramaEntry', meta_mapstreetview_pano_entry_str)
    msv_pano_midpoint_tag = tag('PanoramaMidpoint', meta_mapstreetview_pano_midpoint_str)
    msv_pano_exit_tag = tag('PanoramaExit', meta_mapstreetview_pano_exit_str)
    return msv_available_tag + msv_pano_entry_tag + msv_pano_midpoint_tag + msv_pano_exit_tag


def meta_mapstreetview_pano(coords):
    coords_str = coords[0] + ',' + coords[1]
    cache_path = 'cache/streetview/metadata/' + coords_str
    data = ''
    if os.path.isfile(cache_path):
        with open(cache_path, 'r') as f:
            data = json.loads(f.read())
    else:
        api_key = config('GOOGLE_MAPS_API_KEY')
        url = f'https://maps.googleapis.com/maps/api/streetview/metadata?key={api_key}&location={coords_str}'
        http = urllib3.PoolManager()
        response = http.request('GET', url)
        if (response.status != 200):
            raise Exception(f'HTTP call status: {response.status} (coords: {coords_str})')
        raw_data = response.data.decode('utf-8')
        data = json.loads(raw_data)
        os.makedirs(os.path.dirname(cache_path), exist_ok=True)
        with open(cache_path, 'w') as f:
            f.write(raw_data)
    status = data['status']
    if (status == 'ZERO_RESULTS'):
        return ''
    elif (status == 'OK'):
        # If the panorama is not from Google Car, we ignore it
        if data['copyright'] != 'Â© Google':
            return ''
        # If the panorama is more than 10m away, we ignore it
        street_view_coords = (data['location']['lat'], data['location']['lng'])
        d = distance.distance(coords, street_view_coords).meters
        if (d > 10.0):
            return ''
        return data['pano_id']
    else:
        raise Exception(f'HTTP call returned data: {data} (coords: {coords_str})')


def meta_properties(properties_data: dict):
    """
    Generate a tag per feature property
    """
    return ''.join([tag(key, properties_data[key]) for key in properties_data])


def geo_point(geo_data: dict):
    """
    Generate Point tag kml
    """
    coords = geo_data.get('coordinates', [])
    return tag('Point', tag('coordinates', ','.join(coords)))


def geo_multi_point(geo_data: dict):
    """
    Generate MultiGeometry tag kml
    """
    coords = geo_data.get('coordinates', [])
    if not len(coords):
        return ''
    return tag('MultiGeometry', ''.join([geo_point({'coordinates': coord}) for coord in coords]))


def geo_line_string(geo_data: dict):
    """
    Generate LineString tag kml
    """
    coords = geo_data.get('coordinates', [])
    return tag('LineString', tag('coordinates', gen_linear_ring(coords)))


def geo_multi_line_string(geo_data: dict):
    """
    Generate MultiGeometry tag kml
    """
    coords = geo_data.get('coordinates', [])
    if not len(coords):
        return ''
    return tag('MultiGeometry', ''.join([geo_line_string({'coordinates': coord}) for coord in coords]))


def geo_polygon(geo_data: dict):
    """
    Generate Polygon tag kml
    """
    coords = geo_data.get('coordinates', [])
    if not len(coords):
        return ''
    outer = coords[0]
    inners = coords[1:]
    outer_ring = tag('outerBoundaryIs', tag('LinearRing', tag('coordinates', gen_linear_ring(
        outer))))
    inner_rings = ''.join(
        [tag('innerBoundaryIs',
             tag('LinearRing',
                 tag('coordinates', gen_linear_ring(inner)))) for inner in inners])

    return tag('Polygon', outer_ring + inner_rings)


def geo_multi_polygon(geo_data: dict):
    """
    Generate MultiGeometry tag kml
    """
    coords = geo_data.get('coordinates', [])
    if not len(coords):
        return ''
    return tag('MultiGeometry', ''.join([geo_polygon({'coordinates': coord}) for coord in coords]))


def geo_geometry_collection(geo_data: dict):
    """
    Generate MultiGeometry tag kml from geometries geojson
    """
    geometries = geo_data.get('geometries', [])
    if not len(geometries):
        return ''
    return tag('MultiGeometry', ''.join([geometry_converter(geometry) for geometry in geometries]))


def geometry_converter(geometry: dict):
    """
    Choose generation function to convert these field in geojson to kml
    """
    geo_type = geometry.get('type', '')
    geo_mapping = {
        'Point': geo_point,
        'MultiPoint': geo_multi_point,
        'LineString': geo_line_string,
        'MultiLineString': geo_multi_line_string,
        'Polygon': geo_polygon,
        'MultiPolygon': geo_multi_polygon,
        'GeometryCollection': geo_geometry_collection
    }
    try:
        geo_fn = geo_mapping[geo_type]
    except KeyError:
        raise WrongFormatGeoJson(f'{geo_type} is not a valid type in geojson file')
    else:
        return geo_fn(geometry)


def is_geometry_valid(geo_data: dict):
    """
    Check geojson valid
    """
    return ((geo_data.get('type') is not None
             and geo_data.get('coordinates') is not None)
            or (geo_data.get('GeometryCollection') is not None
                and geo_data.get('geometries') is not None
                and all([is_geometry_valid(geometry) for geometry in geo_data.get('geometries')])))


def gen_linear_ring(coords: list):
    """
    Generate linear ring
    """
    return '\n'.join([','.join(map(str, coord)) for coord in coords])


def tag(tag_name: str, data: str):
    """
    Generate tag include tag name and tag data
    """
    return '<' + tag_name + '>' + data + '</' + tag_name + '>'
